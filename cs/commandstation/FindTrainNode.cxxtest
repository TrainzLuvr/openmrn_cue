#define LOGLEVEL INFO



#include "utils/async_traction_test_helper.hxx"

#include "commandstation/FindTrainNode.hxx"
#include "nmranet/DatagramCan.hxx"
#include "commandstation/AllTrainNodes.hxx"
#include "nmranet/SimpleInfoProtocol.hxx"
#include "nmranet/MemoryConfig.hxx"
#include "nmranet/ConfigUpdateFlow.hxx"
#include "dcc/FakeTrackIf.hxx"
#include "dcc/SimpleUpdateLoop.hxx"
#include "commandstation/ExternalTrainDbEntry.hxx"
#include "commandstation/FindProtocolServer.hxx"

using ::testing::InvokeWithoutArgs;

namespace nmranet {
extern Pool *const g_incoming_datagram_allocator = init_main_buffer_pool();

extern const char *const SNIP_DYNAMIC_FILENAME = "/dev/zero";
}

namespace commandstation {

const struct const_traindb_entry_t const_lokdb[] = {
    // 0
    {51,
     {
      LIGHT, TELEX, SHUNT, ABV, 0xff,
     },
     "BR 260417",
     DCC_28},  // ESU LokPilot 3.0
    {2,
     {
      LIGHT, HORN, SPEECH, ABV, 0xff,
     },
     "ICE 2",
     DCC_28 | DCC_LONG_ADDRESS},  // todo: check fnbits
    {350,
     {
      LIGHT, HORN, SPEECH, ABV, 0xff,
     },
     "Test350",
     DCC_128},  // todo: check fnbits
    {0,
     {
      0,
     },
     "",
     0},
    //  { 0, {0, }, {0,}, "", 0},
    //{ 0, {0, }, {0,}, "", 0},
};

extern const size_t const_lokdb_size =
    sizeof(const_lokdb) / sizeof(const_lokdb[0]);

extern const char TRAINCDI_DATA[] = "Test cdi data";
extern const size_t TRAINCDI_SIZE = sizeof(TRAINCDI_DATA);
extern const char TRAINTMPCDI_DATA[] = "Test cdi tmp data";
extern const size_t TRAINTMPCDI_SIZE = sizeof(TRAINTMPCDI_DATA);


dcc::FakeTrackIf fakeTrack{&g_service, 3};
dcc::SimpleUpdateLoop updateLoop{&g_service, &fakeTrack};

class FindTrainNodeTestBase : public nmranet::TractionTest {
 protected:
  FindTrainNodeTestBase() {
    wait();
    inject_allocated_alias(0x340);
    inject_allocated_alias(0x341);
    inject_allocated_alias(0x342);
    inject_allocated_alias(0x343);
    inject_allocated_alias(0x344);
  }

  ~FindTrainNodeTestBase() { wait(); }

  nmranet::ConfigUpdateFlow cfgflow{ifCan_.get()};
};

class FindTrainNodeTest : public FindTrainNodeTestBase {
 protected:
  FindTrainNodeTest() { wait(); }
  ~FindTrainNodeTest() { wait(); }

  nmranet::CanDatagramService dgHandler_{ifCan_.get(), 5, 2};
  nmranet::MemoryConfigHandler memCfgHandler_{&dgHandler_, node_, 5};
  nmranet::SimpleInfoFlow infoFlow_{&g_service};
  TrainDb db_;
  AllTrainNodes allTrainNodes_{&db_, &trainService_, &infoFlow_,
                               &memCfgHandler_};

  FindTrainNode findFlow_{node_, &db_, &allTrainNodes_};

  nmranet::TrainNodeWithId olcbTrain_{&trainService_, &m1_, 0x0501010118DD};
  ExternalTrainDbEntry dbEntry_{"Deadrail 415", 415, FAKE_DRIVE};
  SingleNodeFindProtocolServer findProtocolServer_{&olcbTrain_, &dbEntry_};  
};

TEST_F(FindTrainNodeTest, CreateDestroy) { wait(); }

TEST_F(FindTrainNodeTest, FindLocalTrain) { 
  wait();
  auto b = invoke_flow(&findFlow_, (DccMode)0, 51);

  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0x060100000000 | 51, b->data()->nodeId);
}

TEST_F(FindTrainNodeTest, FindLocalTrainLong) { 
  auto b = invoke_flow(&findFlow_, (DccMode) (DCC_28 | DCC_LONG_ADDRESS), 2);

  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0x06010000C000 | 2, b->data()->nodeId);
}

TEST_F(FindTrainNodeTest, FindLocalTrainLong2) { 
  auto b = invoke_flow(&findFlow_, (DccMode) 0, 350);

  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0x060100000000 | 350, b->data()->nodeId);
}

TEST_F(FindTrainNodeTest, AllocateTrainShort) { 
  auto b = invoke_flow(&findFlow_, (DccMode) 0, 13);

  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0x060100000000 | 13, b->data()->nodeId);
}

TEST_F(FindTrainNodeTest, AllocateTrainLong) { 
  auto b = invoke_flow(&findFlow_, (DccMode) DCC_LONG_ADDRESS, 13);

  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0x06010000C000 | 13, b->data()->nodeId);
}

TEST_F(FindTrainNodeTest, FindOlcbtrainDefault) { 
  //print_all_packets();
  auto b = invoke_flow(&findFlow_, (DccMode)0, 415);

  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0x0501010118DD, b->data()->nodeId);
}

TEST_F(FindTrainNodeTest, FindOlcbtrain) { 
  auto b = invoke_flow(&findFlow_, OLCBUSER, 415);

  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0x0501010118DD, b->data()->nodeId);
}

class FindResponse {
 public:
  virtual void response(nmranet::EventState state, nmranet::NodeID id) = 0;
};

class MockFindResponse : public FindResponse {
 public:
  MOCK_METHOD2(response,  void(nmranet::EventState state, nmranet::NodeID id));
};

class RemoteFindTrainNodeTest : public FindTrainNodeTest {
 protected:
  RemoteFindTrainNodeTest() {
    nmranet::AddAliasAllocator(SECOND_NODE_ID, &secondIf_);
    secondIf_.add_addressed_message_support();
    // Adds one alias buffer to the alias allocation flow.
    auto* b = secondIf_.alias_allocator()->alloc();


    b->data()->reset();
    b->data()->alias = 0x922;
    b->data()->state = nmranet::AliasInfo::STATE_RESERVED;
    b->data()->do_not_reallocate();
    secondIf_.local_aliases()->add(nmranet::AliasCache::RESERVED_ALIAS_NODE_ID,
                                   b->data()->alias);
    secondIf_.alias_allocator()->reserved_aliases()->insert(b);

    wait();
    print_all_packets();
  }

  ~RemoteFindTrainNodeTest() {
    wait();
  }

  const uint64_t SECOND_NODE_ID = nmranet::TEST_NODE_ID + 256;
  nmranet::IfCan secondIf_{&g_executor, &can_hub0, 10, 10, 5};
  nmranet::DefaultNode secondNode_{&secondIf_, SECOND_NODE_ID};

  RemoteFindTrainNode remoteClient_{&secondNode_};
  StrictMock<MockFindResponse> responseMock_;
};

TEST_F(RemoteFindTrainNodeTest, Create) {}

TEST_F(RemoteFindTrainNodeTest, FindExistingTrain) {
  auto b = invoke_flow(&remoteClient_, 415, true, DccMode::OLCBUSER);
  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0x0501010118DD, b->data()->nodeId);
}

TEST_F(RemoteFindTrainNodeTest, FindRemoteTrainWithAddressLookupAddresNoReply) {
  wait();
  expect_packet(":X19914922N090099FFFFF23440;")
      .WillOnce(InvokeWithoutArgs(
          [this]() { send_packet(":X19544662N090099FFFFF23440;"); }));
  expect_packet(":X19488922N0662;");
  {
    auto b = invoke_flow(&remoteClient_, 234, true, DccMode::OLCBUSER);
    EXPECT_EQ(nmranet::Defs::ERROR_DST_NOT_FOUND, b->data()->resultCode);
    EXPECT_EQ(0, b->data()->nodeId);
  }
}

TEST_F(RemoteFindTrainNodeTest, FindRemoteTrainWithAddressLookup) {
  wait();
  expect_packet(":X19914922N090099FFFFF23440;")
      .WillOnce(InvokeWithoutArgs(
          [this]() { send_packet(":X19544662N090099FFFFF23440;"); }));
  expect_packet(":X19488922N0662;")
      .WillOnce(InvokeWithoutArgs(
          [this]() { send_packet(":X19170662N0501010114EE;"); }));
  {
    auto b = invoke_flow(&remoteClient_, 234, true, DccMode::OLCBUSER);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(0x0501010114EE, b->data()->nodeId);
  }
}

TEST_F(RemoteFindTrainNodeTest, FindNonMatchingTrain) {
  auto b = invoke_flow(&remoteClient_, 234, true, DccMode::OLCBUSER);
  EXPECT_EQ(nmranet::Defs::ERROR_OPENMRN_NOT_FOUND, b->data()->resultCode);
  EXPECT_EQ(0, b->data()->nodeId);
}

TEST_F(RemoteFindTrainNodeTest, AllocateTrain) {
  auto b = invoke_flow(&remoteClient_, 234, FindProtocolDefs::ALLOCATE);
  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0x060100000000 + 234, b->data()->nodeId);
}

TEST_F(RemoteFindTrainNodeTest, FindExistingTrainCallback) {
  EXPECT_CALL(responseMock_, response(_, 0x0501010118DD));
  RemoteFindTrainNodeRequest::ResultFn rf =
      std::bind(&FindResponse::response, &responseMock_, std::placeholders::_1,
                std::placeholders::_2);
  auto b = invoke_flow(&remoteClient_, 415, true, DccMode::OLCBUSER, rf);
  // std::bind(responseMock_, MockFindResponse::response, std::placeholders::_1,
  // std::placeholders::_2)
  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0, b->data()->nodeId);
}

TEST_F(RemoteFindTrainNodeTest, FindTwoTrainCallback) {
  EXPECT_CALL(responseMock_, response(_, 0x060100000033));
  EXPECT_CALL(responseMock_, response(_, 0x06010000c002));
  RemoteFindTrainNodeRequest::ResultFn rf =
      std::bind(&FindResponse::response, &responseMock_, std::placeholders::_1,
                std::placeholders::_2);
  auto b = invoke_flow(&remoteClient_, 2, false, DccMode::OLCBUSER, rf);
  EXPECT_EQ(0, b->data()->resultCode);
  EXPECT_EQ(0, b->data()->nodeId);
}

}  // namespace commandstation
