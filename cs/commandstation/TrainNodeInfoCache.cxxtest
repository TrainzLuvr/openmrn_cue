#define LOGLEVEL VERBOSE

#include "commandstation/traindb_test_utils.hxx"
#include "commandstation/FindTrainNode.hxx"
#include "commandstation/TrainNodeInfoCache.hxx"


namespace commandstation {

const struct const_traindb_entry_t const_lokdb[] = {
    // 0
    {7000, {0xff}, "Node test 7000", DCC_28},
    {0, {0}, "", 0},
};

extern const size_t const_lokdb_size =
    sizeof(const_lokdb) / sizeof(const_lokdb[0]);

const unsigned TRAINDB_TEST_NUM_ALIAS = 20;
OVERRIDE_CONST(local_alias_cache_size, 30);

class MockNotifiable : public Notifiable {
 public:
  MOCK_METHOD0(notify, void());
};

class FindManyTrainTestBase : public TrainDbTest {
 protected:
  FindManyTrainTestBase() {
    nmranet::AddAliasAllocator(SECOND_NODE_ID, &secondIf_);
    secondIf_.add_addressed_message_support();
    // Adds one alias buffer to the alias allocation flow.
    auto* b = secondIf_.alias_allocator()->alloc();


    b->data()->reset();
    b->data()->alias = 0x922;
    b->data()->state = nmranet::AliasInfo::STATE_RESERVED;
    b->data()->do_not_reallocate();
    secondIf_.local_aliases()->add(nmranet::AliasCache::RESERVED_ALIAS_NODE_ID,
                                   b->data()->alias);
    secondIf_.alias_allocator()->reserved_aliases()->insert(b);

    wait();

    wait();
  }

  ~FindManyTrainTestBase() {
    wait_for_search();
    wait();
  }


  void wait_for_search() {
    while (!trainCache_.is_terminated()) {
      usleep(20000);
    }
    wait();
  }

  using NodeCacheMap = TrainNodeInfoCache::NodeCacheMap;

  const NodeCacheMap& get_results_map() {
    return trainCache_.trainNodes_;
  }

  const uint64_t SECOND_NODE_ID = nmranet::TEST_NODE_ID + 256;
  nmranet::IfCan secondIf_{&g_executor, &can_hub0, 10, 10, 5};
  nmranet::DefaultNode secondNode_{&secondIf_, SECOND_NODE_ID};

  RemoteFindTrainNode remoteClient_{&secondNode_};
  TrainNodeCacheOutput output_;
  TrainNodeInfoCache trainCache_{&secondNode_, &remoteClient_, &output_};

  StrictMock<MockNotifiable> mockNotifiable_;
  //nmranet::ConfigUpdateFlow cfgflow{ifCan_.get()};
};

TEST_F(FindManyTrainTestBase, Create) {}

TEST_F(FindManyTrainTestBase, Search7) {
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(7, false, OLCBUSER);
  print_all_packets();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(1, get_results_map().size());
  EXPECT_TRUE(get_results_map().begin()->second.hasNodeName_);
  ASSERT_EQ(1, output_.entry_names.size());
  EXPECT_EQ("Node test 7000", *output_.entry_names[0]);
}

} // namespace commandstation
