#include "utils/async_if_test_helper.hxx"

#include "commandstation/UpdateProcessor.hxx"
#include "dcc/Loco.hxx"
#include "dcc/UpdateLoop.hxx"

#include "dcc/dcc_test_utils.hxx"

using ::testing::ElementsAre;

class MockPacketQueue : public dcc::PacketFlowInterface {
 public:
  MOCK_METHOD1(arrived, void(const dcc::Packet&));

  void send(Buffer<dcc::Packet>* b, unsigned prio) {
    dcc::Packet* pkt = b->data();
    arrived(*pkt);
    b->unref();
  }
};

OVERRIDE_CONST(dcc_packet_min_refresh_delay_ms, 50);

class UpdateProcessorTest : public AsyncCanTest {
 protected:
  UpdateProcessorTest() : updateProcessor_(&g_service, &trackSendQueue_) {}

  ~UpdateProcessorTest() { wait(); }

  void send_empty_packet() {
    Buffer<dcc::Packet>* b;
    mainBufferPool->alloc(&b, nullptr);
    updateProcessor_.send(b);
  }

  void wait() {
    usleep(70000);
    AsyncCanTest::wait();
    Mock::VerifyAndClear(&updateProcessor_);
  }

  void qwait() {
    AsyncCanTest::wait();
    Mock::VerifyAndClear(&updateProcessor_);
  }

  StrictMock<MockPacketQueue> trackSendQueue_;
  commandstation::UpdateProcessor updateProcessor_;
};

TEST_F(UpdateProcessorTest, CreateDestroy) {}

TEST_F(UpdateProcessorTest, SendManyIdles) {
  EXPECT_CALL(trackSendQueue_, arrived(PacketIs(0x04, dcc_from(0xFF, 0, 0xFF))))
      .Times(100);
  for (int i = 0; i < 100; ++i) send_empty_packet();
}

TEST_F(UpdateProcessorTest, TrainRefresh) {
  dcc::Dcc28Train t(dcc::DccShortAddress(55));
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01100000, -2))));
  send_empty_packet();
  wait();
}

TEST_F(UpdateProcessorTest, OneTrainManyRefresh) {
  dcc::Dcc28Train t(dcc::DccShortAddress(55));
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01100000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10000000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10110000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10100000, -2))));
  send_empty_packet();
  wait();

  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01100000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10000000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10110000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10100000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01100000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10000000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10110000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10100000, -2))));
  send_empty_packet();

  wait();
}

TEST_F(UpdateProcessorTest, RefreshThrottle) {
  // In this test there will be only one train, and we check that sending two
  // packets at the same time will be blocked due to packet rate throttling.
  dcc::Dcc28Train t(dcc::DccShortAddress(55));
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01100000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10000000, -2))));
  send_empty_packet();
  qwait();
  // idle packet and the host log will show up.
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x04, dcc_from(0xFF, 0, 0xFF))));
  // if we send too many packets quickly.
  send_empty_packet();
  wait();
}

/// @todo(balazs.racz) figure out why this test is broken
TEST_F(UpdateProcessorTest, UpdateThrottle) {
  // In this test there will be a recent refresh packet that will make the
  // urgent update packet be delayed.
  dcc::Dcc28Train t(dcc::DccShortAddress(55));
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01100000, -2))));
  send_empty_packet();
  qwait();
  Mock::VerifyAndClear(&trackSendQueue_);
  // A notify will cause a speed packet to be injected...
  t.set_speed(-37.5);
  // but due to throttling it will put in an idle packet first.
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x04, dcc_from(0xFF, 0, 0xFF))));
  send_empty_packet();
  wait();

  // and after a bit of wait we will get the interesting packet.
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x44, dcc_from(55, 0b01001011, -2))));
  send_empty_packet();
  qwait();

  // And after that we'll back to refresh but we'll get another idle
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x04, dcc_from(0xFF, 0, 0xFF))));
  send_empty_packet();
  wait();

  // until we wait a bit.
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10000000, -2))));
  send_empty_packet();
  qwait();
}

TEST_F(UpdateProcessorTest, TwoTrainRefresh) {
  dcc::Dcc28Train t(dcc::DccShortAddress(55));
  dcc::Dcc28Train tt(dcc::DccShortAddress(33));
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01100000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(33, 0b01100000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10000000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(33, 0b10000000, -2))));
  send_empty_packet();
  wait();
}

TEST_F(UpdateProcessorTest, OneTrainRefreshAndUpdate) {
  dcc::Dcc28Train t(dcc::DccShortAddress(55));
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01100000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10000000, -2))));
  send_empty_packet();
  wait();
  // A notify will cause a speed packet to be injected...
  t.set_speed(-37.5);
  // ... with increased repeat count
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x44, dcc_from(55, 0b01001011, -2))));
  send_empty_packet();
  wait();
  // And then we continue to go on with background update.
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10110000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10100000, -2))));
  send_empty_packet();
  wait();
  // and when we get back to speed, we see the updated value there.
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01001011, -2))));
  send_empty_packet();
  wait();
}

using dcc::SpeedType;

class ExclusiveSource : public dcc::PacketSource {
 public:
  void get_next_packet(unsigned code, dcc::Packet* packet) override {
    packet->set_dcc_speed14(dcc::DccShortAddress(0), true, false,
                            dcc::Packet::EMERGENCY_STOP);
  }
  void set_speed(SpeedType speed) override {}
  SpeedType get_speed() override { return SpeedType(); }
  void set_emergencystop() override {}
  void set_fn(uint32_t address, uint16_t value) override {}
  uint16_t get_fn(uint32_t address) override { return 0; }
  uint32_t legacy_address() override { return 0; }
  dcc::TrainAddressType legacy_address_type() override {
    return dcc::TrainAddressType::DCC_SHORT_ADDRESS;
  }
} exclusive_source;

class SecondExclusiveSource : public ExclusiveSource {
 public:
  void get_next_packet(unsigned code, dcc::Packet* packet) override {
    packet->set_dcc_speed14(dcc::DccShortAddress(13), true, false, 0);
  }
} second_exclusive_source;

TEST_F(UpdateProcessorTest, TwoTrainRefreshExclusive) {
  dcc::Dcc28Train t(dcc::DccShortAddress(55));
  dcc::Dcc28Train tt(dcc::DccShortAddress(33));
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01100000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(33, 0b01100000, -2))));
  send_empty_packet();
  wait();

  // Adds the exclusive packet source.
  updateProcessor_.add_refresh_source(&exclusive_source,
                                      dcc::UpdateLoopBase::ESTOP_PRIORITY);

  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(0, 0b01100001, -2))));
  send_empty_packet();
  qwait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(0, 0b01100001, -2))));
  send_empty_packet();
  qwait();

  // A notify will cause a speed packet to be injected...
  t.set_speed(-37.5);
  // but it won't appear until later
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(0, 0b01100001, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(0, 0b01100001, -2))));
  send_empty_packet();
  wait();
  // Removes the exclusive source.
  updateProcessor_.remove_refresh_source(&exclusive_source);

  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x44, dcc_from(55, 0b01001011, -2))));
  send_empty_packet();
  wait();

  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10000000, -2))));
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(33, 0b10000000, -2))));
  send_empty_packet();
  wait();
}

TEST_F(UpdateProcessorTest, TwoExclusives) {
  dcc::Dcc28Train t(dcc::DccShortAddress(55));
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b01100000, -2))));
  send_empty_packet();
  wait();

  // Adds the exclusive packet source.
  updateProcessor_.add_refresh_source(
      &second_exclusive_source, dcc::UpdateLoopBase::PROGRAMMING_PRIORITY);
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(13, 0b01100000, -2))))
      .Times(4);
  send_empty_packet();
  send_empty_packet();
  send_empty_packet();
  send_empty_packet();
  qwait();

  updateProcessor_.add_refresh_source(&exclusive_source,
                                      dcc::UpdateLoopBase::ESTOP_PRIORITY);

  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(0, 0b01100001, -2))))
      .Times(4);
  send_empty_packet();
  send_empty_packet();
  send_empty_packet();
  send_empty_packet();
  qwait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(0, 0b01100001, -2))));
  send_empty_packet();
  qwait();

  // A notify will cause a speed packet to be injected...
  t.set_speed(-37.5);
  // but it won't appear until later
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(0, 0b01100001, -2))))
      .Times(2);
  send_empty_packet();
  send_empty_packet();
  wait();
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(0, 0b01100001, -2))));
  send_empty_packet();
  wait();
  // Removes the exclusive source. Go back to the first level priority.
  updateProcessor_.remove_refresh_source(&exclusive_source);

  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(13, 0b01100000, -2))))
      .Times(4);
  send_empty_packet();
  send_empty_packet();
  send_empty_packet();
  send_empty_packet();
  wait();

  // Removes the outer exclusive source. User change packet shows up now.
  updateProcessor_.remove_refresh_source(&second_exclusive_source);

  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x44, dcc_from(55, 0b01001011, -2))));
  send_empty_packet();
  wait();

  // Then background refresh starts again.
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(55, 0b10000000, -2))));
  send_empty_packet();
  wait();
}
