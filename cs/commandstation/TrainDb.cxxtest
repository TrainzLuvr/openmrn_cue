#include "utils/test_main.hxx"
#include "commandstation/TrainDb.hxx"

namespace nmranet {
void PrintTo(const nmranet::NodeID& id, std::ostream& o) {
  o << "Node ID 0x" << StringPrintf("%012x", id);
}
}

namespace commandstation {


const struct const_loco_db_t const_lokdb[] = {
  // 0
  { 2 , { 0, 2, 3, 4,  0xff, }, { LIGHT, HONK, SPEECH, ABV,  0xff, },
    "ICE 2", DCC_128 }, // todo: check fnbits
  { 51, { 0, 1, 3, 4,  0xff, }, { LIGHT, TELEX, SHUNT, ABV,  0xff, },
    "BR 260417", DCC_28 },  // ESU LokPilot 3.0
  { 0, {0, }, {0,}, "", 0},
  //  { 0, {0, }, {0,}, "", 0},
  //{ 0, {0, }, {0,}, "", 0},
};

const size_t const_lokdb_size = sizeof(const_lokdb) / sizeof(const_lokdb[0]);


TEST(TrainDbTest, getaddress) {
  TrainDb db;
  ASSERT_TRUE(db.is_train_id_known(1));
  EXPECT_EQ(0x060100000033ULL, db.get_traction_node(1));
}

TEST(TrainDbTest, isknown) {
  TrainDb db;
  EXPECT_TRUE(db.is_train_id_known(1));
  EXPECT_TRUE(db.is_train_id_known(0));
  EXPECT_FALSE(db.is_train_id_known(2));
  EXPECT_FALSE(db.is_train_id_known(150));
}

TEST(TrainDbTest, fnaddress) {
  TrainDb db;
  ASSERT_TRUE(db.is_train_id_known(1));
  EXPECT_EQ(0U, db.get_function_address(1, 2));
  EXPECT_EQ(1U, db.get_function_address(1, 3));
  EXPECT_EQ(3U, db.get_function_address(1, 4));
  EXPECT_EQ(4U, db.get_function_address(1, 5));
  EXPECT_EQ(TrainDb::UNKNOWN_FUNCTION, db.get_function_address(1, 6));
  EXPECT_EQ(TrainDb::UNKNOWN_FUNCTION, db.get_function_address(1, 17));
  EXPECT_EQ(TrainDb::UNKNOWN_FUNCTION, db.get_function_address(1, 130));
}

}  // namespace commandstation
