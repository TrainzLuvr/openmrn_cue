/** \copyright
 * Copyright (c) 2015, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file XmlGenerator.cxxtest
 *
 * Unit tests for xml generator
 *
 * @author Balazs Racz
 * @date 16 Jan 2016
 */

#include "utils/test_main.hxx"

#include "commandstation/XmlGenerator.hxx"

namespace mobilestation {

class TestEmptyXmlGenerator : public XmlGenerator {
 public:
  static string i2a(int num) {
    TestEmptyXmlGenerator gen;
    gen.integer_to_buffer(num);
    return gen.buffer_;
  }
 protected:
  void generate_more() {}
};

TEST(XmlGeneratorStaticTest, IntegerToString) {
  EXPECT_EQ("123", TestEmptyXmlGenerator::i2a(123));
  EXPECT_EQ("0", TestEmptyXmlGenerator::i2a(0));
  EXPECT_EQ("9", TestEmptyXmlGenerator::i2a(9));
  EXPECT_EQ("10", TestEmptyXmlGenerator::i2a(10));
}


class TestXmlGenerator : public XmlGenerator {
 public:
  TestXmlGenerator() {
    reset();
  }

  void reset() {
    state_ = STATE_FIRST;
    internal_reset();
  }

  string read_all_by(unsigned numbytes) {
    reset();
    unsigned o = 0;
    string ret;
    char b[numbytes];
    do {
      ssize_t result = read(o, b, numbytes);
      //LOG_ERROR("called ofs %u numbytes %u result %ld", o, numbytes, result);
      HASSERT(result >= 0);
      if (!result) return ret;
      ret.append(b, result);
      o += result;
    } while (true);
  }

 protected:
  void generate_more() override {
    switch(state_) {
      case STATE_FIRST:
        add_to_output(from_const_string("aa"));
        ++state_;
        return;
      case STATE_TRIPLES:
        add_to_output(from_const_string("b"));
        add_to_output(from_integer(3));
        add_to_output(from_const_string("xyz"));
        ++state_;
        return;
      case STATE_EOF:
        return;
    }
  }

  enum {
    STATE_FIRST,
    STATE_TRIPLES,
    STATE_EOF
  };
  uint8_t state_;
};

TEST(XmlGeneratorDynTest, IntegerToString) {
  TestXmlGenerator gen;
  EXPECT_EQ("aab3xyz", gen.read_all_by(1));
  EXPECT_EQ("aab3xyz", gen.read_all_by(2));
  EXPECT_EQ("aab3xyz", gen.read_all_by(3));
  EXPECT_EQ("aab3xyz", gen.read_all_by(40));
}

} // namespace mobilestation
