/** \copyright
 * Copyright (c) 2016, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file AllTrainNodes.cxxtest
 *
 * Unit tests for the train FDI generator and AllTrainNodes.
 *
 * @author Balazs Racz
 * @date 16 Jan 2016
 */

#include "mobilestation/AllTrainNodes.hxx"
#include "mobilestation/TrainDb.hxx"
#include "utils/async_traction_test_helper.hxx"
#include "nmranet/SimpleInfoProtocol.hxx"
#include "nmranet/DatagramCan.hxx"
#include "nmranet/MemoryConfig.hxx"
#include "nmranet/SimpleNodeInfoMockUserFile.hxx"

nmranet::MockSNIPUserFile snip_user_file("Default user name",
                                         "Default user description");
const char* const nmranet::SNIP_DYNAMIC_FILENAME =
    nmranet::MockSNIPUserFile::snip_user_file_path;

namespace nmranet {
extern Pool* const g_incoming_datagram_allocator = init_main_buffer_pool();
}

namespace mobilestation {

const struct const_loco_db_t const_lokdb[] = {
    // 0
    {43,
     {
      0, 1, 3, 4, 0xff,
     },
     {
      LIGHT, TELEX, FNT11, ABV, 0xff,
     },
     "Am 843 093-6",
     FAKE_DRIVE},
    {22,
     {
      0, 3, 4, 0xff,
     },
     {
      LIGHT, FNT11, ABV, 0xff,
     },
     "RE 460 TSR",
     FAKE_DRIVE},  // todo: there is no beamer here // LD-32 decoder
    {465,
     {
      0, 1, 0xff,
     },
     {
      LIGHT, SPEECH, 0xff,
     },
     "Jim's steam",
     FAKE_DRIVE | PUSHPULL},
    {0,
     {
      0,
     },
     {
      0,
     },
     "",
     0},
};

extern const size_t const_lokdb_size =
    sizeof(const_lokdb) / sizeof(const_lokdb[0]);

class AllTrainNodesTestBase : public nmranet::TractionTest {
 protected:
  AllTrainNodesTestBase() {
    // create_allocated_alias();
    inject_allocated_alias(0x440);
    inject_allocated_alias(0x441);
    inject_allocated_alias(0x442);
    inject_allocated_alias(0x33A);
  }
};

class AllTrainNodesTest : public AllTrainNodesTestBase {
 protected:
  AllTrainNodesTest() {
    // print_all_packets();
    expect_train_start(0x440, const_lokdb[0].address);
    expect_train_start(0x441, const_lokdb[1].address);
    expect_train_start(0x442, const_lokdb[2].address);
    trainNodes_.reset(new AllTrainNodes{&trainDb_, &trainService_, &infoFlow_,
                                        &memoryConfigHandler_});
  }

  ~AllTrainNodesTest() { wait(); }

  void expect_train_start(nmranet::NodeAlias alias, int address) {
    expect_packet(StringPrintf(":X10701%03XN060100%06X;", alias, address));
    expect_packet(StringPrintf(":X19100%03XN060100%06X;", alias, address));
    expect_packet(
        StringPrintf(":X19547%03XN0101000000000303;", alias, address));
  }

  TrainDb trainDb_;
  nmranet::SimpleInfoFlow infoFlow_{&g_service};
  nmranet::CanDatagramService datagramService_{ifCan_.get(), 5, 2};
  nmranet::MemoryConfigHandler memoryConfigHandler_{&datagramService_, nullptr,
                                                    5};
  std::unique_ptr<AllTrainNodes> trainNodes_;
};

TEST_F(AllTrainNodesTest, CreateDestroy) {}

}  // namespace mobilestation
