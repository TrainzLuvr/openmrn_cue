/** \copyright
 * Copyright (c) 2015, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file PacketStreamSender.cxxtest
 *
 * Unit tests for the packet stream sender.
 *
 * @author Balazs Racz
 * @date 4 May 2015
 */
#include "utils/test_main.hxx"
#include "server/PacketStreamSender.hxx"

using ::testing::StrictMock;
using ::testing::Mock;

namespace server {
namespace {

class PipeTest : public ::testing::Test {
 protected:
  PipeTest() { ::pipe(pipe_fds_); }

  ~PipeTest() {
    ::close(pipe_fds_[0]);
    ::close(pipe_fds_[1]);
  }

  int pipe_fds_[2];
};

string repeated_read(int fd, size_t length) {
  string ret;
  ret.resize(length);
  for (unsigned i = 0; i < length; ++i) {
    HASSERT(::read(fd, &ret[i], 1) == 1);
  }
  return ret;
}

class PacketStreamSendTest : public PipeTest {
 protected:
  PacketStreamSendTest() : sender_(&g_service, pipe_fds_[1]) {}

  PacketStreamSender sender_;
};

static const uint8_t kGoldenData[] = {
    0x3d, 0x82, 0xc6, 0xe1,                                               //
    0,    0,    0,    7,    '1', '2', '3', '4', '5', '6', '7',            //
    0,    0,    0,    9,    '9', '8', '7', '6', '5', '4', '3', '2', '1',  //
    0,    0,    0,    0,                                                  //
    0,    0,    0,    6,    '1', '9', '1', '9', '1', '9'};

TEST_F(PacketStreamSendTest, TestSend) {
  auto* b = sender_.alloc();
  b->data()->assign("1234567");
  sender_.send(b);

  b = sender_.alloc();
  b->data()->assign("987654321");
  sender_.send(b);

  b = sender_.alloc();
  sender_.send(b);

  b = sender_.alloc();
  b->data()->assign("191919");
  sender_.send(b);

  string received_data = repeated_read(pipe_fds_[0], sizeof(kGoldenData));
  string expected_data((const char*)kGoldenData, sizeof(kGoldenData));

  EXPECT_EQ(expected_data, received_data);
}

class MockPacketFlow : public PacketFlowInterface {
 public:
  MOCK_METHOD1(received_packet, void(const string&));

  void send(Buffer<string>* b, unsigned priority) override {
    received_packet(*b->data());
    b->unref();
  }
};

class PacketStreamReceiveTest : public PipeTest {
 protected:
  PacketStreamReceiveTest() : receiver_(&g_service, &handler_, pipe_fds_[0]) {}

  void repeated_write(int fd, string data) {
    for (char c : data) {
      HASSERT(::write(fd, &c, 1) == 1);
    }
  }

  StrictMock<MockPacketFlow> handler_;
  PacketStreamReceiver receiver_;
};

TEST_F(PacketStreamReceiveTest, CreateDestroy) {}

TEST_F(PacketStreamReceiveTest, TestGolden) {
  string expected_data((const char*) kGoldenData, sizeof(kGoldenData));
  ::testing::InSequence seq;
  EXPECT_CALL(handler_, received_packet("1234567"));
  EXPECT_CALL(handler_, received_packet("987654321"));
  EXPECT_CALL(handler_, received_packet(""));
  EXPECT_CALL(handler_, received_packet("191919"));
  repeated_write(pipe_fds_[1], expected_data);
  wait_for_main_executor();
}

class PacketStreamSRTest : public PacketStreamReceiveTest {
 protected:
  PacketStreamSRTest() : sender_(&g_service, pipe_fds_[1]) {}

  void send_packet(string s) {
    auto* b = sender_.alloc();
    b->data()->assign(s);
    sender_.send(b);
  }

  void wait() {
    while (!sender_.is_waiting()) wait_for_main_executor();
    wait_for_main_executor();
  }

  PacketStreamSender sender_;
};

TEST_F(PacketStreamSRTest, SendSingle) {
  EXPECT_CALL(handler_, received_packet("1234567"));
  send_packet("1234567");
  wait();
}

TEST_F(PacketStreamSRTest, SendMultiple) {
  EXPECT_CALL(handler_, received_packet("1234567"));
  send_packet("1234567");
  wait();
  Mock::VerifyAndClear(&handler_);

  EXPECT_CALL(handler_, received_packet("123"));
  send_packet("123");
  EXPECT_CALL(handler_, received_packet(""));
  send_packet("");
  wait();
  Mock::VerifyAndClear(&handler_);

  string s;
  for (int i = 0; i < 127000; ++i) {
    s.push_back(i % 250);
  }
  EXPECT_CALL(handler_, received_packet(s));
  send_packet(s);
  wait();
  Mock::VerifyAndClear(&handler_);
}

}  // namespace
}  // namespace server
