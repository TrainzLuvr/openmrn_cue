/** \copyright
 * Copyright (c) 2015, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file TrainControlService.cxxtest
 *
 * Unittests for the train control service.
 *
 * @author Balazs Racz
 * @date 5 May 2015
 */

#include "server/TrainControlService.hxx"

#include "utils/async_datagram_test_helper.hxx"
#include "server/rpc_test_helper.hxx"
#include "custom/HostProtocol.hxx"

using nmranet::NodeHandle;
using nmranet::AsyncDatagramTest;

namespace server {
namespace {

class TrainControlServiceTestBase : public AsyncDatagramTest {
 protected:
  TrainControlServiceTestBase() {
    train_control_.initialize(&datagram_support_, node_,
                              NodeHandle(node_->node_id()));
  }
  ~TrainControlServiceTestBase() {
    wait();
  }

  TrainControlService train_control_{&g_executor};
  bracz_custom::HostClient client_{&datagram_support_, node_, &can_hub1};
};

TEST_F(TrainControlServiceTestBase, Create) {}

class TrainControlServiceTest : public TrainControlServiceTestBase, protected RpcServiceTestHelper {
protected:
  void wait() {
    TrainControlServiceTestBase::wait();
    RpcServiceTestHelper::wait();
    TrainControlServiceTestBase::wait();
  }

  TrainControlServiceTest() : RpcServiceTestHelper(&train_control_) {}
};

TEST_F(TrainControlServiceTest, Create) {}

TEST_F(TrainControlServiceTest, SendPing) {
  const char kResponse[] =
      "id: 42  failed: false response { Pong { value : 32 }}";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));

  const char kRequest[] = "id: 42 request { DoPing { value: 31 } }";
  send_request(kRequest);
  wait();
}

TEST_F(TrainControlServiceTest, SendUnknown) {
  const char kResponse[] =
      "id: 45 failed: true error_detail: \"unimplemented command\"";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));

  const char kRequest[] = "id: 45 request { }";
  send_request(kRequest);
  wait();
}

class TrainControlServiceCanTest : public TrainControlServiceTest, protected AsyncCan1Test {
protected:
  ~TrainControlServiceCanTest() {
    wait();
  }

  static void SetUpTestCase() {
    TrainControlServiceTest::SetUpTestCase();
    AsyncCan1Test::SetUpTestCase();
  }

  static void TearDownTestCase() {
    TrainControlServiceTest::TearDownTestCase();
    AsyncCan1Test::TearDownTestCase();
  }
};

TEST_F(TrainControlServiceCanTest, SendCanPacket) {
  const char kResponse[] =
      "id: 45 failed: false ";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));

  const char kRequest[] = "id: 45 request { DoSendRawCanPacket { d: 0xE0 d:0x08 d:0x00 d:0x7E d:0x03 d:0x55 d:0xaa d:0x55 }  }";
  
  expect_packet1(":X1C00007EN55AA55;"); // the translated packet
  send_request(kRequest);
  wait();
}

TEST_F(TrainControlServiceCanTest, SendCanPacketWait) {
  

  const char kRequest[] = "id: 45 request { DoSendRawCanPacket { d: 0xE0 d:0x08 d:0x00 d:0x7E d:0x03 d:0x55 d:0xaa d:0x55 wait: true }  }";
  
  expect_packet1(":X1C00007EN55AA55;"); // the translated packet
  send_request(kRequest);
  wait();

  const char kResponse[] =
      "id: 45 failed: false response { RawCanPacket { data:-32 data:0x08 data:0x00 data:0x7f data:3 data:1 data:2 data:1 }  } ";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));
  wait();
  send_packet1(":X1C00007FN010201;");
  wait();
}



}  // namespace
}  // namespace server
