/** \copyright
 * Copyright (c) 2015, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file TrainControlService.cxxtest
 *
 * Unittests for the train control service.
 *
 * @author Balazs Racz
 * @date 5 May 2015
 */

#include "server/TrainControlService.hxx"

#include "utils/async_datagram_test_helper.hxx"
#include "server/rpc_test_helper.hxx"
#include "custom/HostProtocol.hxx"
#include "mobilestation/MobileStationTraction.hxx"
#include "commandstation/TrainDb.hxx"
#include "utils/MockTrain.hxx"
#include "utils/Clock.hxx"

using nmranet::NodeHandle;
using nmranet::AsyncDatagramTest;
using nmranet::TrainService;
using nmranet::MockTrain;
using nmranet::TrainNode;
using commandstation::TrainDb;
using mobilestation::MobileStationTraction;

namespace server {
namespace {

static const char kStaticLokDb[] = R"proto(
LokDb {
  Lok {
    id: 0
    name: "Am 843 093-6"
    address: 1
    Function {
      id: 2
      type: 1
    }
    Function {
      id: 3
      type: 6
    }
  }
  Lok {
    id: 1
    name: "Re 460 TSR"
    address: 1
    Function {
      id: 32
      type: 160
    }
  }
}
)proto";

class TrainControlServiceTestBase : public AsyncDatagramTest {
 protected:
  TrainControlServiceTestBase() {
    train_control_.initialize(&datagram_support_, node_,
                              NodeHandle(node_->node_id()), kStaticLokDb,
                              false);
    clock_ = new MockClock(137000);
    // transfers ownership
    train_control_.TEST_inject_clock(clock_);
  }
  ~TrainControlServiceTestBase() { wait(); }

  void set_clock(long long ts_usec) { clock_->set_time(ts_usec * 1000); }

  TrainControlService train_control_{&g_executor};
  bracz_custom::HostClient client_{&datagram_support_, node_, &can_hub1};
  MockClock* clock_{nullptr};
};

TEST_F(TrainControlServiceTestBase, Create) {}

class TrainControlServiceTest : public TrainControlServiceTestBase,
                                protected RpcServiceTestHelper {
 protected:
  void wait() {
    TrainControlServiceTestBase::wait();
    RpcServiceTestHelper::wait();
    TrainControlServiceTestBase::wait();
  }

  TrainControlServiceTest() : RpcServiceTestHelper(&train_control_) {}
};

TEST_F(TrainControlServiceTest, Create) {}

TEST_F(TrainControlServiceTest, SendPing) {
  const char kResponse[] =
      "id: 42  failed: false response { Pong { value : 32 }}";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));

  const char kRequest[] = "id: 42 request { DoPing { value: 31 } }";
  send_request(kRequest);
  wait();
}

TEST_F(TrainControlServiceTest, SendUnknown) {
  const char kResponse[] =
      "id: 45 failed: true error_detail: \"unimplemented command\" response {}";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));

  const char kRequest[] = "id: 45 request { }";
  send_request(kRequest);
  wait();
}

class TrainControlServiceCanTest : public TrainControlServiceTest,
                                   protected AsyncCan1Test {
 protected:
  ~TrainControlServiceCanTest() { wait(); }

  static void SetUpTestCase() {
    TrainControlServiceTest::SetUpTestCase();
    AsyncCan1Test::SetUpTestCase();
  }

  static void TearDownTestCase() {
    TrainControlServiceTest::TearDownTestCase();
    AsyncCan1Test::TearDownTestCase();
  }
};

TEST_F(TrainControlServiceCanTest, SendCanPacket) {
  const char kResponse[] = "id: 45 failed: false  response {}";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));

  const char kRequest[] =
      "id: 45 request { DoSendRawCanPacket { d: 0xE0 d:0x08 d:0x00 d:0x7E "
      "d:0x03 d:0x55 d:0xaa d:0x55 }  }";

  expect_packet1(":X1C00007EN55AA55;");  // the translated packet
  send_request(kRequest);
  wait();
}

TEST_F(TrainControlServiceCanTest, SendCanPacketWait) {
  const char kRequest[] =
      "id: 45 request { DoSendRawCanPacket { d: 0xE0 d:0x08 d:0x00 d:0x7E "
      "d:0x03 d:0x55 d:0xaa d:0x55 wait: true }  }";

  expect_packet1(":X1C00007EN55AA55;");  // the translated packet
  send_request(kRequest);
  wait();

  const char kResponse[] =
      "id: 45 failed: false response { RawCanPacket { data:-32 data:0x08 "
      "data:0x00 data:0x7f data:3 data:1 data:2 data:1 }  } ";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));
  wait();
  send_packet1(":X1C00007FN010201;");
  wait();
}

class TrainControlServiceTrainTest : public TrainControlServiceTest {
 protected:
  TrainControlServiceTrainTest() {
    // Sets up the traction train node.
    ifCan_->local_aliases()->add(0x060100000056U, 0x490);
    ifCan_->local_aliases()->add(0x060100000057U, 0x491);
    EXPECT_CALL(m1_, legacy_address()).Times(AtLeast(0)).WillRepeatedly(
        Return(0x00000057U));
    EXPECT_CALL(m2_, legacy_address()).Times(AtLeast(0)).WillRepeatedly(
        Return(0x00000056U));
    trains_.emplace_back(new nmranet::TrainNode(&trainService_, &m1_));
    wait();
    trains_.emplace_back(new nmranet::TrainNode(&trainService_, &m2_));
    wait();
  }

  ~TrainControlServiceTrainTest() { wait(); }

  TrainService trainService_{ifCan_.get()};
  CanIf can_if1_{&g_service, &can_hub1};
  TrainDb train_db_{};
  MobileStationTraction mosta_traction_{&can_if1_,  ifCan_.get(),
                                        &train_db_, node_};
  StrictMock<MockTrain> m1_, m2_;
  std::vector<std::unique_ptr<TrainNode>> trains_;
};

TEST_F(TrainControlServiceTrainTest, Create) {}

MATCHER_P(VApprox, velocity, "") { return (arg - velocity).speed() < 1e-3; }

nmranet::Velocity mph_to_velocity(float mph, bool is_fwd) {
  nmranet::Velocity v;
  v.set_mph(mph);
  if (!is_fwd) v.reverse();
  return v;
}

TEST_F(TrainControlServiceTrainTest, SetSpeed0) {
  const char kResponse[] =
      "id: 51  failed: false response { Speed { id : 0 speed : 32 timestamp: 137 }}";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));

  const char kRequest[] =
      "id: 51 request { DoSetSpeed { id: 0 dir: 1 speed: 32 } }";
  EXPECT_CALL(m1_, set_speed(VApprox(mph_to_velocity(32, true))));
  send_request(kRequest);
  wait();
}

TEST_F(TrainControlServiceTrainTest, SetSpeedTwo) {
  EXPECT_CALL(
      response_handler_,
      received_packet(CanonicalizeProto(
          "id: 51  failed: false response { Speed { id : 0 speed : 32 timestamp: 137}}")));

  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(
                                     "id: 47  failed: false response { Speed { "
                                     "id : 1 dir : -1 speed : 23 timestamp: 142 }}")));

  EXPECT_CALL(m1_, set_speed(VApprox(mph_to_velocity(32, true))));
  EXPECT_CALL(m2_, set_speed(VApprox(mph_to_velocity(23, false))));
  send_request("id: 51 request { DoSetSpeed { id: 0 dir: 1 speed: 32 } }");
  wait();
  set_clock(142);
  send_request("id: 47 request { DoSetSpeed { id: 1 dir: -1 speed: 23 } }");
  wait();

  send_request_and_expect_response(
      "id: 178 request { DoGetLokState {} }",
      "id: 178 failed: false response { "                             //
      "  lokstate { id: 0 dir: 1 speed: 32 ts: 137 speed_ts: 137 " //
      "    Function { id: 2 value: 0 ts: 0 } " //
      "    Function { id: 3 value: 0 ts: 0 } " //
      "} "  //
      "  lokstate { id: 1 dir: -1 speed: 23 ts: 142 speed_ts: 142 " //
      "    Function { id: 32 value: 0 ts: 0 } " //
      "} }");
}

TEST_F(TrainControlServiceTrainTest, GetSpeed0) {
  const char kResponse[] =
      "id: 51  failed: false response { Speed { id : 0 dir : -1 speed : 32 timestamp: 137 }}";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));

  const char kRequest[] = "id: 51 request { DoSetSpeed { id: 0 } }";
  EXPECT_CALL(m1_, get_speed()).WillOnce(Return(mph_to_velocity(33, false)));
  EXPECT_CALL(m1_, get_commanded_speed())
      .WillRepeatedly(Return(nmranet::Velocity()));
  EXPECT_CALL(m1_, get_actual_speed())
      .WillRepeatedly(Return(nmranet::Velocity()));
  send_request(kRequest);
  wait();
}

TEST_F(TrainControlServiceTrainTest, SetFn) {
  const char kResponse[] =
      "id: 51  failed: false response { Accessory { train_id : 1 accessory_id: "
      "6 value : 1 timestamp: 137 }}";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));

  const char kRequest[] =
      "id: 51 request { DoSetAccessory { train_id: 1 accessory_id: 6 value : 1 "
      "} }";
  // accessory 6 is mapped to fn 2
  EXPECT_CALL(m2_, set_fn(2, 1));
  send_request(kRequest);
  wait();
}

TEST_F(TrainControlServiceTrainTest, GetFn) {
  const char kResponse[] =
      "id: 51  failed: false response { Accessory { train_id : 1 accessory_id: "
      "6 value : 1 timestamp: 137 }}";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(kResponse)));

  const char kRequest[] =
      "id: 51 request { DoSetAccessory { train_id: 1 accessory_id: 6 } }";
  // accessory 6 is mapped to fn 2
  EXPECT_CALL(m2_, get_fn(2)).WillOnce(Return(1));
  send_request(kRequest);
  wait();
}

TEST_F(TrainControlServiceTrainTest, GetSpeedAndFnLokState) {
  EXPECT_CALL(m2_, set_speed(VApprox(mph_to_velocity(32, true))));
  send_request_and_expect_response(
      "id: 35 request { DoSetSpeed { id: 1 dir: 1 speed: 32 } }",
      "id: 35  failed: false response { Speed { id : 1 speed : 32 timestamp: 137}}");
  wait();
  set_clock(178);
  EXPECT_CALL(m2_, get_fn(1)).WillOnce(Return(1));
  send_request_and_expect_response(
      "id: 51 request { DoSetAccessory { train_id: 1 accessory_id: 3 } }",
      "id: 51  failed: false response { Accessory { train_id : 1 accessory_id: "
      "3 value : 1 timestamp: 178 }}");
  wait();

  send_request_and_expect_response(
      "id: 93 request { DoGetLokState { id: 1 } }",
      "id: 93  failed: false response { lokstate { id : 1 dir: 1 speed : 32 "
      "ts: 178 speed_ts: 137 Function { id: 3 value: 1 ts: 178 } "
      " Function { id: 32 value: 0 ts: 0 } }}");
  wait();
}

TEST_F(TrainControlServiceTrainTest, WaitForState) {
  EXPECT_CALL(m1_, set_speed(VApprox(mph_to_velocity(32, true))));
  EXPECT_CALL(m2_, set_speed(VApprox(mph_to_velocity(23, false))));
  send_request_and_expect_response(
      "id: 51 request { DoSetSpeed { id: 0 dir: 1 speed: 32 } }",
      "id: 51  failed: false response { Speed { id : 0 speed : 32 timestamp: 137 }}");
  wait();
  set_clock(142);
  send_request_and_expect_response(
      "id: 47 request { DoSetSpeed { id: 1 dir: -1 speed: 23 } }",
      "id: 47  failed: false response { Speed { id : 1 dir : -1 speed : 23 timestamp: 142 }}");
  wait();
  // This will return immediately.
  send_request_and_expect_response(
      "id:53 request { DoWaitForChange { id: 1 timestamp: 99 }}",
      "id: 53 failed: false response { WaitForChangeResponse { id : 1 "
      "timestamp: 142} EmergencyStop { stop: true } }");
  wait();
  send_request("id:75 request { DoWaitForChange { id: 1 timestamp: 142 }}");
  wait();  // not return yet
  set_clock(199);
  expect_response(
      "id: 75 failed: false response { WaitForChangeResponse { id : 1 "
      "timestamp: 199} EmergencyStop { stop: true } }");
  EXPECT_CALL(m2_, set_speed(VApprox(mph_to_velocity(11, false))));
  send_request_and_expect_response(
      "id: 60 request { DoSetSpeed { id: 1 dir: -1 speed: 11 } }",
      "id: 60  failed: false response { Speed { id : 1 dir : -1 speed : 11 timestamp: 199 }}");
  wait();
}

TEST_F(TrainControlServiceTrainTest, SetEmergencyStop) {
  send_request_and_expect_response(
      "id : 103 request { DoSetEmergencyStop { stop : false }}",
      "id: 103 failed:false response{ EmergencyStop { stop: false } WaitForChangeResponse { timestamp: 137 } }");
  wait();
}

TEST_F(TrainControlServiceTrainTest, SetAndGetEmergencyStop) {
  send_request_and_expect_response(
      "id : 103 request { DoSetEmergencyStop { stop : false }}",
      "id: 103 failed:false response{ EmergencyStop { stop: false } WaitForChangeResponse { timestamp: 137 } }");
  wait();

  /*  get emergency stop is not supported by mostatraction.cxx
  send_request_and_expect_response(
      "id : 103 request { DoSetEmergencyStop { }}",
      "id: 103 failed:false response{ EmergencyStop { stop: false } }");
      wait();*/

  set_clock(182);

  send_request_and_expect_response(
      "id : 103 request { DoSetEmergencyStop { stop : true }}",
      "id: 103 failed:false response{ EmergencyStop { stop: true } WaitForChangeResponse { timestamp: 182 } }");
  wait();

  /*send_request_and_expect_response(
      "id : 103 request { DoSetEmergencyStop { }}",
      "id: 103 failed:false response{ EmergencyStop { stop: true } }");
      wait();*/
}

TEST_F(TrainControlServiceTest, GetLokDb) {
  string response =
      string("id: 42  failed: false response {") + kStaticLokDb + " }";
  EXPECT_CALL(response_handler_, received_packet(CanonicalizeProto(response)));

  const char kRequest[] = "id: 42 request { DoGetLokDb { } }";
  send_request(kRequest);
  wait();
}

}  // namespace
}  // namespace server

OVERRIDE_CONST(mobile_station_train_count, 0);

namespace commandstation {
const struct const_loco_db_t const_lokdb[] = {
    // 0
    {0x57,
     {0, 1, 3, 4, 0xff, },
     {LIGHT, TELEX, FNT11, ABV, 0xff, },
     "BR 260417",
     DCC_28},
    // 1
    {0x56, {0,  1,  3,  4,  2,  5,  6,  7,  8,  9,   10,
            11, 12, 13, 14, 15, 16, 17, 18, 19, 0xff},
     {LIGHT,  ENGINE, HONK, SPEECH, SPEECH, SPEECH, SPEECH,
      LIGHT1, FNP,    ABV,  HONK,   SOUNDP, SOUNDP, SOUNDP,
      HONK,   HONK,   HONK, HONK,   HONK,   HONK,   0xff},
     "ICN", DCC_28 | PUSHPULL},
    {0, {0, }, {0, }, "", 0}, };

extern const size_t const_lokdb_size =
    sizeof(const_lokdb) / sizeof(const_lokdb[0]);
}
